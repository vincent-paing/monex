buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath CommonLibs.bintray_plugin
  }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.jfrog.bintray'

android {
  compileSdkVersion BuildConfig.compileSdk
  buildToolsVersion "29.0.2"

  viewBinding {
    enabled = true
  }

  defaultConfig {
    minSdkVersion BuildConfig.minSdk
    targetSdkVersion BuildConfig.targetSdk
    versionCode BuildConfig.versionCode
    versionName BuildConfig.versionName
    setProperty("archivesBaseName", "monex-$versionName")

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles 'consumer-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8.toString()
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation Kotlin.stdblib_jdk
  implementation KotlinCoroutine.core

  implementation AndroidXCore.core_ktx

  //UI
  implementation Material.material
  implementation AndroidXConstraintLayout.constraint_layout
  implementation AndroidXViewPager.view_pager_2

  //Lifecycle
  implementation AndroidArchLifeCycle.lifecycle
  implementation AndroidArchLifeCycle.view_model
  implementation AndroidArchLifeCycle.common_java8
  //  "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

  //OKhttp
  implementation OkHttp.client

  //Moshi
  implementation Moshi.core
  kapt Moshi.code_gen

  //SQL
  implementation ThreeTenBp.android

  //Room

  implementation Room.runtime
  kapt Room.compiler
  implementation Room.ktx

  testImplementation Room.testing
  testImplementation CommonLibs.junit
  androidTestImplementation AndroidXTestExt.junit
  androidTestImplementation AndroidXEspresso.core
}

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

group = "com.aungkyawpaing.monex"
version = BuildConfig.versionName

project.ext {
  mavDevelopers = [(properties.getProperty("bintrayUser")): "Aung Kyaw Paing"]
  mavSiteUrl = "https://github.com/vincent-paing/monex"
  mavGitUrl = mavSiteUrl + '.git'
  mavProjectName = BuildConfig.artifactName
  bugTrackerUrl = mavSiteUrl + '/issues/'
  mavLibraryLicenses = ["Apache-2.0": "http://www.apache.org/licenses/LICENSE-2.0.txt"]
  mavLibraryDescription = BuildConfig.description
  mavVersion = BuildConfig.versionName
}

println(properties.getProperty("bintrayKey"))

bintray {
  user = properties.getProperty("bintrayUser")
  key = properties.getProperty("bintrayKey")
  publications = ['mavenPublish']
  override = true
  pkg {
    repo = "maven"
    name = BuildConfig.artifactName
    desc = BuildConfig.description
    websiteUrl = mavSiteUrl
    vcsUrl = mavGitUrl
    issueTrackerUrl = bugTrackerUrl
    licenses = ["Apache-2.0"]
    publicDownloadNumbers = true
    publish = true
  }
}

apply from: 'https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/master/gradle-mavenizer.gradle'